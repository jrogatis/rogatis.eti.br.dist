{"version":3,"sources":["api/imageGallery/imageGallery.controller.js"],"names":["index","show","destroy","config","update","accessKeyId","process","env","aws_access_key_id","secretAccessKey","aws_secret_access_key","region","s3","S3","params","Bucket","s3Url","exports","signing","req","res","request","body","fileName","filename","path","readType","expiration","add","toDate","s3Policy","type","stringPolicy","base64Policy","Buffer","toString","signature","createHmac","digest","credentials","url","fields","key","AWSAccessKeyId","acl","policy","success_action_status","jsonp","respondWithResult","statusCode","entity","status","json","removeEntity","remove","then","end","handleEntityNotFound","handleError","err","send","console","log","listObjects","promise","images","data","Contents","map","push","image","Key","catch","Posts","findById","id","exec","paramsToDelete","deleteObject","result"],"mappings":"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","file":"imageGallery.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/imageGallery              ->  index\n * POST    /api/imageGallery              ->  create\n * GET     /api/imageGallery/:id          ->  show\n * DELETE  /api/imageGallery/:id          ->  destroy\n */\n\n'use strict';\n\nimport jsonpatch from 'fast-json-patch';\nimport AWS from 'aws-sdk';\nimport crypto from 'crypto';\nimport moment from 'moment';\n\nAWS.config.update({\n  accessKeyId: process.env.aws_access_key_id,\n  secretAccessKey: process.env.aws_secret_access_key,\n  region: 'us-east-1'\n});\nvar s3 = new AWS.S3();\n\nvar params = {\n  Bucket: 'rogatis'\n}\n\nvar s3Url = 'https://s3.amazonaws.com/rogatis';\n\nexports.signing = function(req, res) {\n    var request = req.body;\n    var fileName = request.filename\n    var path = fileName;\n\n    var readType = 'public-read';\n\n    var expiration = moment().add(5, 'm').toDate(); //15 minutes\n\n    var s3Policy = {\n        'expiration': expiration,\n        'conditions': [{\n                'bucket': 'rogatis'\n            },\n            ['starts-with', '$key', path],\n            {\n                'acl': readType\n            },\n            {\n              'success_action_status': '201'\n            },\n            ['starts-with', '$Content-Type', request.type],\n            ['content-length-range', 2048, 10485760], //min and max\n        ]\n    };\n\n    var stringPolicy = JSON.stringify(s3Policy);\n    var base64Policy = new Buffer(stringPolicy, 'utf-8').toString('base64');\n\n    // sign policy\n    var signature = crypto.createHmac('sha1', process.env.aws_secret_access_key)\n        .update(new Buffer(base64Policy, 'utf-8')).digest('base64');\n\n    var credentials = {\n        url: s3Url,\n        fields: {\n            key: path,\n            AWSAccessKeyId: process.env.aws_access_key_id,\n            acl: readType,\n            policy: base64Policy,\n            signature: signature,\n            'Content-Type': request.type,\n            success_action_status: 201\n        }\n    };\n    res.jsonp(credentials);\n}\n\nfunction respondWithResult(res, statusCode) {\n  statusCode = statusCode || 200;\n  return function (entity) {\n    if (entity) {\n      return res.status(statusCode).json(entity);\n    }\n    return null;\n  };\n}\n\nfunction removeEntity(res) {\n  return function (entity) {\n    if (entity) {\n      return entity.remove()\n        .then(() => {\n          res.status(204).end();\n        });\n    }\n  };\n}\n\nfunction handleEntityNotFound(res) {\n  return function (entity) {\n    if (!entity) {\n      res.status(404).end();\n      return null;\n    }\n    return entity;\n  };\n}\n\nfunction handleError(res, statusCode) {\n  statusCode = statusCode || 500;\n  return function (err) {\n    res.status(statusCode).send(err);\n  };\n}\n\n// Gets a list of images\nexport function index(req, res) {\n\n   console.log(process.env.aws_access_key_id);\n  return s3.listObjects(params).promise()\n    .then(data => {\n      let images = [];\n      data.Contents.map(image => {\n\n        images.push(image.Key);\n      })\n      return res.status(200).json(images);\n    })\n    .catch(err => {\n    console.log(err);\n    handleError(res)\n    }\n  );\n}\n\n// Gets a single Posts from the DB\nexport function show(req, res) {\n  return Posts.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Deletes a image from the s3\nexport function destroy(req, res) {\n  console.log(req.params.id);\n  let paramsToDelete = {\n     Bucket: 'rogatis',\n    Key: req.params.id  \n    }\n  s3.deleteObject(paramsToDelete).promise()\n    .then(result => {\n      console.log(result);\n      return res.status(200);\n    })\n     .catch(err => {\n      console.log(err);\n      handleError(res)\n    })\n  \n}\n\n\n"]}